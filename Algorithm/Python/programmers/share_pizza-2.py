def solution(n):
    for i in range(6, n*6+1, 6):
        if i % n == 0 :
            return i // 6
        
'''
다른 사람 풀이
'''

# import math

# def solution(n):
#     return (n * 6) // math.gcd(n, 6) // 6

# 유클리드 호제법으로 최대 공약수를 사용해서 최소 공배수를 구하는 원리
# 유클리드 호제법은 쉽게 말해서 x, y의 최대 공약수는 y, r (r == x%y)의 최대 공약수와 같다는 원리를 이용하는 것
# 즉 계속해서 위의 원리를 반복하여 x(y) % y(r) == 0 일 때 y(r)자리에 있는 수가 x, y의 최대 공약수이다.
# 여기서 최소공배수 또한 구할 수 있는데 x * y // gcd(x, y) 한 값이 최소 공배수이다.
# 위 식의 (n * 6) // math.gcd(n, 6)인 부분은 n과 6의 최소 공배수를 구하는 과정이며, 최소 공배수는 6조각인 피자를 n명이 똑같이 나눠 먹을 수 있는 전체 피자 개수를 뜻환다.
# 여기서 전체 피자 조각의 개수가 아니라 피자 판 수를 구하라 하였으므로 // 6을 추가해 6조각인 피자가 몇 판 필요한지 계산한다.

n = int(input())
print(solution(n=n))